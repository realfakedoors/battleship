{"version":3,"sources":["components/Ship.js","components/Square.js","components/Board.js","components/Dialog.js","assets/allShips.js","components/Game.js","index.js"],"names":["Ship","player","length","type","column","row","orientation","shipName","numberedColumn","split","findIndex","col","vertical","gridColumn","gridRow","horizontal","className","data-testid","style","transform","Square","contents","boardNumber","attemptAttack","attackResult","placeSquare","onClick","icon","process","src","alt","statusIcon","Board","playerName","boardState","sunkenShips","showShips","replace","map","str","toUpperCase","substr","join","columns","rows","Array","keys","i","squares","square","ships","ship","sunkenShip","Dialog","displayIcon","displayText","buttonText","buttonAction","allShips","Game","display","useState","newRandomizedBoard","board1","setBoard1","board2","setBoard2","name1","setName1","name2","setName2","currentTurn","setCurrentTurn","lastAttack","setLastAttack","gameStatus","setGameStatus","checkForVictory","checkForSunkenShips","board","forEach","filter","every","push","addShip","sq","sort","findLowestColumn","Math","min","findLowestRow","sunk","checkSquares","startingCol","startingRow","colToTry","rowToTry","grabSquare","thisSquare","squareHasNoShip","squareNotYetAttacked","newBoard","buildBoard","shipPlaced","floor","random","squaresToTry","squareIndex","recordAttack","attempt","result","useEffect","placeholder","id","document","getElementById","value","nextPlayer","currentPlayer","resultIcon","lastTurnMessage","victor","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2100db32.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Ship = ({ player, length, type, column, row, orientation, shipName }) => {\n  const numberedColumn = () => {\n    const columns = \"ABCDEFGHIJ\".split(\"\");\n    return (columns.findIndex((col) => col === column)) + 1;\n  };\n\n  const vertical = {\n    gridColumn: `${numberedColumn()} / ${numberedColumn()}`,\n    gridRow: `${row} / span ${length}`,\n  };\n\n  const horizontal = {\n    gridColumn: `${numberedColumn()} / span ${length}`,\n    gridRow: `${row} / ${row}`,\n  };\n\n  const transformText = {\n    transform: `rotate(-90deg)`,\n  };\n\n  return (\n    <div\n      className={\"ship \" + type}\n      data-testid={type + player}\n      style={orientation === \"vertical\" ? vertical : horizontal}\n    >\n      <p style={orientation === \"vertical\" ? transformText : null}>\n        {shipName(type)}\n      </p>\n    </div>\n  );\n};\n\nexport default Ship;\n","import React from \"react\";\n\nconst Square = ({\n  contents,\n  column,\n  row,\n  boardNumber,\n  attemptAttack,\n  attackResult,\n}) => {  \n  const placeSquare = {\n    gridColumn: `${numberedColumn()} / span 1`,\n    gridRow: `${row} / span 1`,\n  };\n\n  function numberedColumn() {\n    const columns = \"ABCDEFGHIJ\".split(\"\");\n    return columns.findIndex((col) => col === column) + 1;\n  }\n\n  function statusIcon(attackResult) {\n    if (attackResult) {\n      const icon = process.env.PUBLIC_URL + \"/icons/\" + attackResult + \".svg\";\n      return <img src={icon} alt={attackResult} className=\"attack-result\" />;\n    }\n  }\n\n  return (\n    <div\n      className=\"square\"\n      data-testid={boardNumber + column + row}\n      style={placeSquare}\n      onClick={() => attemptAttack(boardNumber, column, row)}\n    >\n      {statusIcon(attackResult)}\n    </div>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\n\nimport Ship from \"./Ship\";\nimport Square from \"./Square\";\n\nconst Board = ({\n  boardNumber,\n  playerName,\n  boardState,\n  sunkenShips,\n  showShips,\n  attemptAttack,\n}) => {\n  function displaySquare(square) {\n    return (\n      <Square\n        contents={square.contents}\n        attackResult={square.attackResult}\n        column={square.column}\n        row={square.row}\n        boardNumber={boardNumber}\n        attemptAttack={attemptAttack}\n        key={square.column + square.row}\n      />\n    );\n  }\n\n  function displayShip(ship) {\n    if (showShips) {\n      return (\n        <Ship\n          player={boardNumber}\n          type={ship.type}\n          shipName={shipName}\n          length={ship.length}\n          column={ship.column}\n          row={ship.row}\n          orientation={ship.orientation}\n          key={ship.type + boardNumber}\n        />\n      );\n    }\n  }\n\n  function shipName(type) {\n    return type\n      .replace(/-/, \" \")\n      .split(\" \")\n      .map((str) => str[0].toUpperCase() + str.substr(1))\n      .join(\" \");\n  }\n\n  function displayColumn(col) {\n    return (\n      <p className=\"display-column\" key={col + boardNumber}>\n        {col}\n      </p>\n    );\n  }\n\n  function displayRow(row) {\n    return (\n      <p className=\"display-row\" key={row + boardNumber}>\n        {row}\n      </p>\n    );\n  }\n\n  function displaySunkenShip(sunkenShip) {\n    return (\n      <div\n        className={\"sunken-ship \" + sunkenShip}\n        key={playerName + sunkenShip}\n      >\n        {shipName(sunkenShip)}\n      </div>\n    );\n  }\n\n  let columns = \"ABCDEFGHIJ\".split(\"\");\n  let rows = [...Array(10).keys()].map((i) => i + 1);\n\n  return (\n    <div className=\"board-container\">\n      <div className=\"player-name\">{playerName}</div>\n      <div className=\"display-columns\">{columns.map(displayColumn)}</div>\n      <div className=\"display-rows\">{rows.map(displayRow)}</div>\n      <div className=\"board\" data-testid={\"board-\" + boardNumber}>\n        {boardState.squares.map(displaySquare)}\n        {boardState.ships.map(displayShip)}\n      </div>\n      <div className=\"display-sunken-ships\">\n        <span className=\"sunk-text\">{sunkenShips.length > 0 && \"Sunk:\"}</span>\n        {sunkenShips.map(displaySunkenShip)}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\n\nconst Dialog = ({ displayIcon, displayText, buttonText, buttonAction }) => {\n  return (\n    <div className=\"dialog\">\n      {displayIcon && <img src={displayIcon} alt=\"display-icon\" className=\"dialog-display-icon\" />}\n      <p className=\"dialog-text\">{displayText}</p>\n      <button\n        className=\"button\"\n        onClick={() => {\n          buttonAction();\n        }}\n      >\n        {buttonText}\n      </button>\n    </div>\n  );\n};\n\nexport default Dialog;\n","export const allShips = [\n  {\n    type: \"carrier\",\n    length: 5,\n  },\n  {\n    type: \"battleship\",\n    length: 4,\n  },\n  {\n    type: \"destroyer\",\n    length: 3,\n  },\n  {\n    type: \"submarine\",\n    length: 3,\n  },\n  {\n    type: \"patrol-boat\",\n    length: 2,\n  },\n];\n","import React, { useState, useEffect } from \"react\";\n\nimport Board from \"./Board\";\nimport Dialog from \"./Dialog\";\n\nimport { allShips } from \"../assets/allShips.js\";\n\nconst Game = () => {\n  const [board1, setBoard1] = useState(newRandomizedBoard(1));\n  const [board2, setBoard2] = useState(newRandomizedBoard(2));\n  const [name1, setName1] = useState(\"Player1\");\n  const [name2, setName2] = useState(\"Player2\");\n  const [currentTurn, setCurrentTurn] = useState(1);\n  const [lastAttack, setLastAttack] = useState(null);\n  const [gameStatus, setGameStatus] = useState(\"New Game\");\n  \n  useEffect(() => {\n    checkForVictory(checkForSunkenShips(board1), name1);\n    checkForVictory(checkForSunkenShips(board2), name2);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentTurn]);\n  \n  function checkForVictory(sunkenShips, playerName){\n    if (sunkenShips.length === allShips.length){\n      setGameStatus(\"Victory\");\n    }\n  }\n  \n  function checkForSunkenShips(board){\n    let sunkenShips = [];\n    let shipsToCheck = allShips.map((ship) => {\n      return ship.type\n    });\n    \n    shipsToCheck.forEach(ship => {\n      const shipToCheck = board.squares.filter((square) => {\n        return square.contents[0] === ship\n      });\n      if (shipToCheck.every(square => square.attackResult === \"hit\")){\n        sunkenShips.push(ship)\n      }\n    })\n    return sunkenShips;\n  }\n  \n  function addShip(ship, squares, orientation, player) {\n    const findLowestColumn = (squares) => {\n      return (squares.map(sq => (sq[0])).sort()[0]);\n    }\n    \n    const findLowestRow = (squares) => {\n      return (Math.min(...squares.map(sq => (sq[1]))));\n    }\n    return({\n      type: ship.type,\n      length: ship.length,\n      column: findLowestColumn(squares),\n      row: findLowestRow(squares),\n      orientation: orientation,\n      sunk: false\n    });\n  }\n  \n  function showShips(player){\n    return (currentTurn === player);\n  }\n\n  function buildBoard(columns, rows) {\n    let newBoard = {squares: [], ships:[]};\n    \n      rows.forEach((row) => {\n        columns.forEach((column) => {\n          const square = {\n            column: column,\n            row: row,\n            contents: [],\n            attackResult: null,\n          };\n          newBoard.squares.push(square);\n        });\n    });\n    return newBoard;\n  }\n  \n  function checkSquares(length, orientation, startingCol, startingRow, columns){\n    let squares = []\n    for (let i = 0; i < length; i++) {\n      let colToTry;\n      let rowToTry;\n\n      if (orientation === \"horizontal\") {\n        rowToTry = startingRow;\n        if (startingCol + i > 9) {\n          colToTry = columns[startingCol - (length - i)];\n        } else {\n          colToTry = columns[startingCol + i];\n        }\n      } else if (orientation === \"vertical\") {\n        colToTry = columns[startingCol];\n        if (startingRow + i > 10) {\n          rowToTry = startingRow - (length - i);\n        } else {\n          rowToTry = startingRow + i;\n        }\n      }\n      squares.push([colToTry, rowToTry]);\n    }\n    return squares;\n  }\n  \n  function grabSquare(board, thisSquare){\n    return (board.squares.filter((square) => {\n      return (\n        square.column === thisSquare[0] && square.row === thisSquare[1]\n      );\n    }))[0];\n  }\n  \n  function squareHasNoShip(board, thisSquare){\n    return grabSquare(board, thisSquare).contents.length === 0;\n  };\n  \n  function squareNotYetAttacked(board, thisSquare){\n    return grabSquare(board, thisSquare).attackResult === null;\n  }\n\n  function newRandomizedBoard(player) {\n    const columns = \"ABCDEFGHIJ\".split(\"\");\n    const rows = [...Array(10).keys()].map((i) => i + 1);\n\n    let newBoard = buildBoard(columns, rows);\n\n    allShips.forEach((ship) => {\n      let shipPlaced = false;\n      while (shipPlaced !== true) {\n        const startingCol = Math.floor(Math.random() * 10);\n        const startingRow = Math.floor(Math.random() * 10) + 1;\n        const coinflip = Math.floor(Math.random() * 2);\n        let orientation;\n        coinflip === 0\n          ? (orientation = \"vertical\")\n          : (orientation = \"horizontal\");\n\n        let squaresToTry = checkSquares(ship.length, orientation, startingCol, startingRow, columns);\n        \n        if (squaresToTry.every(sq => squareHasNoShip(newBoard, sq))) {\n          squaresToTry.forEach((square) => {\n            square = { column: square[0], row: square[1] };\n            const squareIndex = newBoard.squares.findIndex(\n              (sq) => sq.column === square.column && sq.row === square.row\n            );\n            newBoard.squares.[squareIndex].contents = [ship.type];\n          });\n          newBoard.ships.push(addShip(ship, squaresToTry, orientation, player));\n          shipPlaced = true;\n        }\n      }\n    });\n    return newBoard;\n  }\n  \n  function recordAttack(board, square, attempt){\n    grabSquare(board, square).attackResult = attempt;\n    if (currentTurn === 1){\n      setBoard2(board);\n      setCurrentTurn(2);\n    } else if (currentTurn === 2){\n      setBoard1(board);\n      setCurrentTurn(1);\n    }\n    setLastAttack({result: attempt, square: square[0] + square[1]});\n    setGameStatus(\"Swap\");\n  }\n  \n  function attemptAttack(boardNumber, column, row){\n    const square = [column, row];\n    \n    if (boardNumber === 1 && currentTurn === 2 && squareNotYetAttacked(board1, square)) {\n      if (squareHasNoShip(board1, square)){\n        recordAttack(board1, square, \"miss\");\n      } else {\n        recordAttack(board1, square, \"hit\");\n      };\n    } else if (boardNumber === 2 && currentTurn === 1 && squareNotYetAttacked(board2, square)) {\n      if (squareHasNoShip(board2, square)){\n        recordAttack(board2, square, \"miss\");\n      } else {\n        recordAttack(board2, square, \"hit\");\n      };\n    }\n  }\n  \n  function startGame(){\n    setName1(document.getElementById(\"name1-field\").value || name1);\n    setName2(document.getElementById(\"name2-field\").value || name2);\n    setGameStatus(\"Swap\");\n  }\n  \n  function displayBoards(){\n    if (currentTurn === 1) {\n      return (\n        <div>\n          <Board boardNumber={2} playerName={name2} boardState={board2} sunkenShips={checkForSunkenShips(board2)} showShips={showShips(2)} attemptAttack={attemptAttack} />\n          <Board boardNumber={1} playerName={name1} boardState={board1} sunkenShips={checkForSunkenShips(board1)} showShips={showShips(1)} attemptAttack={attemptAttack} />\n        </div>\n      );\n    } else if (currentTurn === 2) {\n      return (\n        <div>\n          <Board boardNumber={1} playerName={name1} boardState={board1} sunkenShips={checkForSunkenShips(board1)} showShips={showShips(1)} attemptAttack={attemptAttack} />\n          <Board boardNumber={2} playerName={name2} boardState={board2} sunkenShips={checkForSunkenShips(board2)} showShips={showShips(2)} attemptAttack={attemptAttack} />\n        </div>\n      );\n    }\n  }\n  \n  let display;\n  switch(gameStatus){\n    case \"New Game\":\n      display = (\n        <div className=\"new-game\">\n          <p className=\"new-game-text\">\n            Welcome to Battleship!<br />Enter your names:\n          </p>\n          <div className=\"username-fields\">\n            <input type=\"text\" placeholder={name1} id=\"name1-field\" className=\"username-field\"></input>\n            <input type=\"text\" placeholder={name2} id=\"name2-field\" className=\"username-field\"></input>\n          </div>\n          <button className=\"button\" onClick={() => {startGame()}}>Start Game</button>\n        </div>\n      );\n      break;\n    case \"Swap\":\n      let nextPlayer;\n      let currentPlayer;\n      let resultIcon;\n      let lastTurnMessage = \"\";\n      \n      if (currentTurn === 1){\n        nextPlayer = name1;\n        currentPlayer = name2;\n      } else if (currentTurn === 2){\n        nextPlayer = name2;\n        currentPlayer = name1;\n      }\n      if (lastAttack?.result){\n        lastTurnMessage = `${currentPlayer} attacked ${lastAttack.square}, it's a ${lastAttack.result}! `;\n        resultIcon = process.env.PUBLIC_URL + \"/icons/\" + lastAttack.result + \".svg\";\n      }\n      \n      display = (\n        <Dialog\n          displayIcon={resultIcon}\n          displayText={lastTurnMessage + `Good luck, ${nextPlayer}! It's your turn.`}\n          buttonText={\"Ready!\"}\n          buttonAction={() => {setGameStatus(\"Gameplay\")}}\n        />\n      );\n      break;\n    case \"Victory\":\n      let victor;\n      currentTurn === 1 ? victor = name1 : victor = name2 ;\n      display = (\n        <Dialog \n          displayText={`Awesome job, ${victor}! You won!`} \n          buttonText={\"Play Again?\"} \n          buttonAction={() => {setGameStatus(\"New Game\")}} />\n      );\n      break;\n    default:\n      display = displayBoards();\n  }\n  \n  return (\n    <div className=\"game\" data-testid=\"game\">\n      {display}\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './assets/custom.css';\nimport './assets/reset.css';\n\nimport Game from './components/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}